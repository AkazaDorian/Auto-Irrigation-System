package com.androstock.myweatherapp;


import android.content.Intent;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;

import android.widget.TextView;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;


import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;


public class SecondActivity extends AppCompatActivity {

    TextView sensorTemp;
    EditText editTextAddress, editTextPort;
    Button buttonConnect, irrgateButton;
    String address,port;



    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_second);

        editTextAddress =  findViewById(R.id.address);
        editTextPort =  findViewById(R.id.host);
        buttonConnect =  findViewById(R.id.connectButt);
        sensorTemp = findViewById(R.id.SensorTemp);
        irrgateButton = findViewById(R.id.irrigateButt);

    }


    public void onClickButton2(View v) {
        Intent myIntent = new Intent(SecondActivity.this, MainActivity.class);
       startActivity(myIntent);
    }
    public void onClickButton3(View v) {
        startActivity(new Intent(SecondActivity.this, thirdActivity.class));
    }

    public void onIrriButton(View v){

        new Thread() {

            @Override
            public void run() {
                try {
                    // start sending data as long as click CONNECT button
                    sendIrri(editTextAddress.getText().toString(), Integer.parseInt(editTextPort.getText().toString()));

                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }.start();
    }
    private void sendIrri(String ipAddress, int portNum)  throws IOException {

        InetAddress host = InetAddress.getByName( ipAddress ) ;

        DatagramSocket socket = new DatagramSocket();
        String IrriMessage;
        IrriMessage = "water";

        byte[] IrriData = IrriMessage.getBytes();
        DatagramPacket IrriPacket = new DatagramPacket(IrriData, IrriData.length, host, portNum);
        socket.send(IrriPacket);
        socket.close();
    }



    public void onModeButt(View v) throws IOException {
        new Thread() {

            @Override
            public void run() {
                try {
                    // start sending data as long as click CONNECT button
                    sendMode(editTextAddress.getText().toString(), Integer.parseInt(editTextPort.getText().toString()));


                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }.start();
        Toast.makeText(getApplicationContext(), "AUTO MODE ON",
                Toast.LENGTH_SHORT).show();
    }



    private void sendMode(String ipAddress, int portNum)  throws IOException {

        InetAddress host = InetAddress.getByName( ipAddress ) ;

        DatagramSocket socket = new DatagramSocket();
        String ModeMessage;
        ModeMessage = "AutoMode";

        byte[] ModeData = ModeMessage.getBytes();
        DatagramPacket ModePacket = new DatagramPacket(ModeData, ModeData.length, host, portNum);
        socket.send(ModePacket);
        socket.close();

    }

    public void onConnectButton(View v) {
        new Thread() {
            @Override
            public void run() {
                try {
                    // start sending data as long as click CONNECT button
                    sendData(editTextAddress.getText().toString(), Integer.parseInt(editTextPort.getText().toString()));

                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }.start();
                }
    private void sendData(String ipAddress, int portNum)  throws IOException {
            // define the variables
            InetAddress host = InetAddress.getByName( ipAddress ) ;

             // call the send and request functions using IP address and port number
            sendTempReq(host , portNum);
            /*getTemp(ReceiverPortNum);
            sendHumiReq(host, portNum);
            getHumi(ReceiverPortNum);*/

    }
    private void sendTempReq(InetAddress ipAddress, int portNum) throws IOException {
        DatagramSocket socket = new DatagramSocket();

        String TempMessage;
        TempMessage = "t&h";

        byte[] TempData = TempMessage.getBytes();
        DatagramPacket TempPacket = new DatagramPacket(TempData, TempData.length, ipAddress, portNum);
        socket.send(TempPacket);
        socket.close();
    }
    public void onGetButton(View v) {
        new Thread() {
            @Override
            public void run() {
                try {
                    // start sending data as long as click CONNECT button
                    getData();

                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }.start();
    }
    private void getData() throws IOException {
        int server_port = 10000;
        DatagramSocket socket = new DatagramSocket(server_port);

        while (true){
            byte[] backData = new byte[1500];
            DatagramPacket BackPacket = new DatagramPacket(backData, backData.length);

            try{
                socket.receive(BackPacket);
            }catch (IOException e){
                e.printStackTrace();
            }
            sensorTemp.setText(new String(BackPacket.getData()).trim());
        }

    }

   /* private void getTemp( int portNum) throws IOException {
        DatagramSocket TempBackSocket = new DatagramSocket( portNum ) ;

        int PACKETSIZE = 100;
        // looping until receive back packet
        for( ;; ) {
            DatagramPacket TempBackPacket = new DatagramPacket(new byte[PACKETSIZE], PACKETSIZE);
            TempBackSocket.receive(TempBackPacket);
            sensorTemp.setText(new String(TempBackPacket.getData()).trim());
            break;

            }
            TempBackSocket.close() ;
        }

    private void sendHumiReq(InetAddress ipAddress, int portNum) throws IOException {
        DatagramSocket HumiSocket = new DatagramSocket();

        String HumiMessage;
        HumiMessage = "h";

        byte[] Hdata = HumiMessage.getBytes();
        DatagramPacket HumiPacket = new DatagramPacket(Hdata, Hdata.length, ipAddress, portNum);
        HumiSocket.send(HumiPacket);

        HumiSocket.close() ;

    }


    private void getHumi( int portNum) throws IOException {

            DatagramSocket HumiBackSocket = new DatagramSocket( portNum ) ;
            int PACKETSIZE = 100;

            // looping until receive back packet
            for( ;; ) {
                DatagramPacket HumiBackPacket = new DatagramPacket(new byte[PACKETSIZE], PACKETSIZE);
                HumiBackSocket.receive(HumiBackPacket);
                sensorTemp.setText(new String(HumiBackPacket.getData()).trim());
                break;
            }
    }*/
}



